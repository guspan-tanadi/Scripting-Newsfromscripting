{
    "text": "OPML's building block -- the include node type",
    "created": "Fri, 16 Jul 2021 13:26:36 GMT",
    "type": "outline",
    "tags": "opml, include",
    "description": "Every serious system has to provide for breaking big things up into smaller, reusable bits. ",
    "metaImage": "http://scripting.com/images/2021/07/16/containers.png",
    "subs": [
        {
            "text": "I was talking with a developer yesterday and the question came up, what about huge outlines? How does \"OPML\" handle those? That gave me a chance to tell the story about how i'm <a href=\"https://github.com/scripting/Scripting-News/tree/master/blog\">archiving</a> Scripting News, and how include <a href=\"https://www.google.com/search?q=site%3Ascripting.com+include+nodes\">nodes</a> work. ",
            "created": "Fri, 16 Jul 2021 15:26:41 GMT",
            "flInCalendar": true
        },
        {
            "text": "All systems have to evolve as projects get bigger -- you break it up into components and link them together in a single document. That makes the code more manageable, and makes it possible to reuse the pieces. Every serious system has to provide for breaking big things up into smaller, reusable bits. For example... ",
            "created": "Fri, 16 Jul 2021 13:30:40 GMT",
            "flBulletedSubs": "true",
            "subs": [
                {
                    "text": "Node.js has <a href=\"https://www.w3schools.com/nodejs/nodejs_npm.asp\">packages</a>. You can include a package in an app, or in another package, with a require call, like this: <code>const fs = require (\"fs\");</code> Then you can refer to exported bits from the \"fs\" package in your app as if they were part of it, because they are. ",
                    "created": "Fri, 16 Jul 2021 13:29:50 GMT",
                    "flInCalendar": true
                },
                {
                    "text": "The <a href=\"https://en.wikipedia.org/wiki/C_(programming_language)\">programming language C</a> has the #include directive: <code>#include \"standard.h\"</code>. The C preprocessor reads the file, and replaces the #include directive with the contents of the file. Includes can contain includes. ",
                    "created": "Fri, 16 Jul 2021 13:31:58 GMT",
                    "flInCalendar": true
                },
                {
                    "text": "Wikipedia has a <a href=\"https://en.wikipedia.org/wiki/Include_directive\">survey page</a> explaining how inclusion works in other languages, such as Fortran, Pascal, PHP. ",
                    "created": "Fri, 16 Jul 2021 15:48:13 GMT",
                    "flInCalendar": true
                },
                {
                    "text": "OPML has <a href=\"http://dev.opml.org/spec2.html#inclusion\">include nodes</a> which have a <i>type</i> attribute whose value is include and a <i>url</i> attribute which is the address of an OPML file. When the user expands an include node, the outliner reads the contents of the OPML file and inserts it as subs of the include node. To the user, if the net is sufficiently fast, and the file is a manageable size, they wouldn't need to know that it was an include node. ",
                    "created": "Fri, 16 Jul 2021 13:29:07 GMT",
                    "flInCalendar": true
                }
            ],
            "flInCalendar": true
        },
        {
            "text": "An example. I archive my blog, which is written in an outliner, and saved as OPML, at the beginning of every month. I save the previous month in a repository <a href=\"https://github.com/scripting/Scripting-News/tree/master/blog\">on GitHub</a>, and empty out the outline I edit. The CMS that builds the HTML rendering and the RSS version of my blog is able to jump month boundaries. So I have a convenient-size outline for editing, and everything else just hums along. ",
            "created": "Fri, 16 Jul 2021 13:29:19 GMT",
            "flInCalendar": true
        },
        {
            "text": "But what if I wanted an outline of all my blog posts going back to May 2017? I would do that with include nodes. And just for fun, I did exactly that. ",
            "created": "Fri, 16 Jul 2021 13:40:29 GMT",
            "flInCalendar": true
        },
        {
            "text": "Here's <a href=\"https://gist.github.com/scripting/005d8b83ea76fbb25df8627096cb75f7\">an OPML file that contains includes</a> for each of the months of 2018, 2019 and 2020. If you have an outliner that can expand includes, then you can view all the writing for those years in one outline",
            "created": "Fri, 16 Jul 2021 15:29:37 GMT",
            "flInCalendar": true
        }
    ],
    "flInCalendar": true
}