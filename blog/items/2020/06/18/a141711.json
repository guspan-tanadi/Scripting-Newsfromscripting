{
    "text": "Simpler server-side JavaScript",
    "created": "Thu, 18 Jun 2020 14:17:11 GMT",
    "type": "outline",
    "description": "I believe it's possible to simplify callbacks by removing the need to use them for simple asynchronous I/O operations, yet give up none of the efficiency.",
    "subs": [
        {
            "text": "Yesterday I posted here and on Twitter this idea:",
            "created": "Thu, 18 Jun 2020 14:23:02 GMT",
            "subs": [
                {
                    "text": "<i>I’d like to do a new server-side JavaScript environment that’s compatible with <a href=\"https://nodejs.org/\">Node</a>, ie runs Node apps, no breakage, but it also eliminates the need for <a href=\"http://callbackhell.com/\">callbacks</a>, <a href=\"http://scripting.com/2020/06/14/144017.html?title=javascriptPromisesVsCallbacks\">promises</a> or async/await. I believe it’s technically possible.</i>",
                    "created": "Thu, 18 Jun 2020 01:00:18 GMT"
                }
            ]
        },
        {
            "text": "A friend suggested using <a href=\"https://babeljs.io/\">Babel</a> to prototype this. ",
            "created": "Thu, 18 Jun 2020 14:24:10 GMT",
            "subs": [
                {
                    "text": "<i>I could imagine a modifier keyword on a function that means this function is internally going to do async things and calls to it should block until until it completes. That could be translated by a Babel plugin into somewhat that internally uses promises queuing to make callers wait for completion.</i>",
                    "created": "Thu, 18 Jun 2020 14:24:22 GMT"
                }
            ]
        },
        {
            "text": "This is the way to start. I wonder if anyone reading this has the expertise in Babel to make this work. I've started a <a href=\"https://github.com/scripting/Scripting-News/issues/178\">thread</a> over in the repo to discuss.  ",
            "created": "Thu, 18 Jun 2020 14:25:34 GMT"
        },
        {
            "text": "I will write up some code to demonstrate what the Babel plug-in will do, hopefully later today. Stay tuned. ",
            "created": "Thu, 18 Jun 2020 14:50:01 GMT"
        },
        {
            "text": "<b>Why try to simplify?</b>",
            "created": "Thu, 18 Jun 2020 14:56:59 GMT"
        },
        {
            "text": "I was asked on Twitter why I want this. There are all kinds of overhead, time, space, and intellectual. I program in a high level language instead of machine language because there's less intellectual overhead. It would save both time and space to use machine language. But I'm saving complexity by programming in a <a href=\"https://en.wikipedia.org/wiki/High-level_programming_language\">HLL</a>, and that means I can build more complex and useful software. ",
            "created": "Thu, 18 Jun 2020 14:26:12 GMT"
        },
        {
            "text": "Why not just use promises, they're easy my correspondent asks. I say it's easier to not have to program something than use something that makes it easier to program. That's the philosophy of factoring. However the JavaScript I envision would be backward compatible with EC6. It would run any code that runs in Node. But it would also be able to process asynchronous functions with syntax that's as simple for a programmer as calling a synchronous function. ",
            "created": "Thu, 18 Jun 2020 14:28:28 GMT"
        },
        {
            "text": "I don't think there's any question that callbacks are something we'd like to simplify. <i>I'm saying it's possible to simplify callbacks by removing the need to use them for simple asynchronous I/O operations, yet give up none of the efficiency. </i>Most other languages do it, so can JavaScript. ",
            "created": "Thu, 18 Jun 2020 14:58:27 GMT"
        },
        {
            "text": "There's another reasons, transparency in APIs. For example, I might want to prototype a function by storing its data in memory, but at a later time may decide to store it on disk or on the net. I want to keep the interface unchanged, but with today's JavaScript you can't, you have to go to callbacks/promises/etc.",
            "created": "Thu, 18 Jun 2020 14:19:09 GMT"
        },
        {
            "text": "In general, the philosophy of factoring says you take a problem that you're solving over and over, and create a library of functions that do it, and call them instead of replicating the code. ",
            "created": "Thu, 18 Jun 2020 14:20:15 GMT"
        }
    ]
}