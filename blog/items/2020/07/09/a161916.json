{
    "text": "Really Simple JavaScript, day 2",
    "created": "Thu, 09 Jul 2020 16:19:16 GMT",
    "type": "outline",
    "subs": [
        {
            "text": "Following up on <a href=\"http://scripting.com/2020/07/08/131602.html?title=reallySimpleJavascript\">yesterday's post</a> where I talk about striving for simplicity in using JavaScript, my friend <a href=\"https://twitter.com/awbjs\">Allen Wirfs-Brock</a>, who has been involved in JavaScript language design for many years, and was editor of the <a href=\"http://www.ecma-international.org/ecma-262/6.0/\">ES6 spec</a>, responded thus:",
            "created": "Thu, 09 Jul 2020 16:19:24 GMT",
            "subs": [
                {
                    "text": "Because of JavaScript’s \"don’t break existing code\" policy, often the only way to fix an existing problematic features is to leave it alone and add a better alternative. This inevitably leads to profiles that include the better features and leaves out the deprecated ones.  ",
                    "created": "Thu, 09 Jul 2020 16:27:30 GMT"
                },
                {
                    "text": "You probably don’t use <a href=\"https://eslint.org/\">eslint</a> , but most commercial JS devs seem to. There are probably thousands of configuration profiles for it that enforce various style guides and and subset preferences. ",
                    "created": "Thu, 09 Jul 2020 16:27:57 GMT"
                },
                {
                    "text": "For example <a href=\"https://standardjs.com/\">JavaScript Standard Style</a> is popular but controversial both because of its self-assumed name and because of the positions it takes on semicolon usage and other conventions.",
                    "created": "Thu, 09 Jul 2020 16:28:52 GMT"
                },
                {
                    "text": "Regarding choice of function forms, my preference is to use the <code>function hello () {}</code> form in most situations where I wanted to define a named function, both global and local.  I’d generally reserve arrow functions for cases where I’m passing an anonymous function as an argument or otherwise using it as a first class value.  ",
                    "created": "Thu, 09 Jul 2020 16:29:56 GMT"
                },
                {
                    "text": "I’d probably only use <code>const hello= () => {};</code> in situations where I need to name a function that needs to reference the this binding of its surrounding environment.",
                    "created": "Thu, 09 Jul 2020 16:30:19 GMT"
                }
            ]
        }
    ]
}